substitutions:
  # TODO: The id of your existing thermostat entity in Home Assistant
  thermostat_id: climate.hallway_thermostat

esphome:
  # TODO: Name this dial
  name: hallway-dial-1fe53b
  # TODO: Friendly name too.
  friendly_name: Hallway Dial
  min_version: 2024.11.0
  name_add_mac_suffix: false

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: esp-idf

# Enable logging
logger:

# Enable Home Assistant API
api:
  actions:
  - action: play_rtttl
    variables:
      song_str: string
    then:
      - rtttl.play:
          rtttl: !lambda 'return song_str;'

# Allow Over-The-Air updates
ota:
- platform: esphome

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  # If you need it, configure manual wifi settings:
  # manual_ip:
  #   # Set this to the IP of the ESP
  #   static_ip: 192.168.1.100
  #   # Set this to the IP address of the router. Often ends with .1
  #   gateway: 192.168.1.1
  #   # The subnet of the network. 255.255.255.0 works for most home networks.
  #   subnet: 255.255.255.0


i2c:
  - id: internal_i2c
    sda: GPIO11
    scl: GPIO12

rc522_i2c:
  - id: nfc_reader
    i2c_id: internal_i2c
    address: 0x28

output:
  - platform: ledc
    pin: GPIO3
    id: buzzer
  - platform: ledc
    pin: GPIO9
    id: backlight_output

rtttl:
  output: buzzer

button:
  - platform: template
    name: "Play Siren"
    on_press:
      then:
        - logger.log: "Siren Button Pressed"
        - rtttl.play: 'siren:d=8,o=5,b=100:d,e,d,e,d,e,d,e'

sensor:
  - platform: rotary_encoder
    name: "Rotary Encoder"
    id: encoder
    pin_a: GPIO40
    pin_b: GPIO41
    publish_initial_value: true
    on_clockwise:
      - logger.log: "Turned Clockwise"
    on_anticlockwise:
      - logger.log: "Turned Anticlockwise"
    on_value:
      then:
      - delay: 0.2s
      - homeassistant.service:
          service: climate.set_temperature
          data_template:
            entity_id: '${thermostat_id}'
            temperature: !lambda "return id(encoder).state;"
  - platform: homeassistant
    id: target_temp
    entity_id: '${thermostat_id}'
    attribute: temperature
    on_value:
    - script.stop: wake_screen
    - script.execute: wake_screen
    - sensor.rotary_encoder.set_value:
       id: encoder
       value: !lambda "return id(target_temp).state;"
  - platform: homeassistant
    id: current_temp
    entity_id: '${thermostat_id}'
    attribute: current_temperature
text_sensor:
  - platform: homeassistant
    id: hvac_mode
    entity_id: '${thermostat_id}'
    attribute: hvac_action
    on_value:
    - script.stop: wake_screen
    - script.execute: wake_screen

time:
  # RTC
  - platform: pcf8563
    id: rtctime
    i2c_id: internal_i2c
    address: 0x51
    update_interval: never
  - platform: homeassistant
    id: esptime
    on_time_sync:
      then:
        - pcf8563.write_time:

binary_sensor:
  - platform: gpio
    name: Button
    id: front_button
    pin:
      number: GPIO42
      inverted: true
    on_click:
      min_length: 20ms
      max_length: 500ms
      then:
      - script.stop: wake_screen
      - script.execute: wake_screen
      - homeassistant.service:
          service: climate.toggle
          data_template:
            entity_id: '${thermostat_id}'

spi:
  id: spi_bus
  mosi_pin: GPIO5
  clk_pin: GPIO6

font:
  - file: "gfonts://Roboto@700"
    id: roboto_60
    size: 60
  - file: "gfonts://Roboto@700"
    id: roboto_30
    size: 30

display:
  - platform: ili9xxx
    id: round_display
    model: GC9A01A
    cs_pin: GPIO7
    reset_pin: GPIO8
    dc_pin: GPIO4
    invert_colors: false
    lambda: |-
      if (id(hvac_mode).state == "off") {
        it.printf(120, 120, id(roboto_60), TextAlign::CENTER, "%.1f°F", id(current_temp).state);
      } else {
        it.printf(120, 60, id(roboto_30), TextAlign::CENTER, "%s to:", id(hvac_mode).state.c_str());
        it.printf(120, 120, id(roboto_60), TextAlign::CENTER, "%.1f°F", id(target_temp).state);
        it.printf(120, 180, id(roboto_30), TextAlign::CENTER, "Current: %.1f°F", id(current_temp).state);
      }


touchscreen:
  - platform: ft5x06
    id: touch
    i2c_id: internal_i2c
    address: 0x38
    # interrupt_pin: GPIO14  # not supported by this component
    on_touch:
      - script.stop: wake_screen
      - script.execute: wake_screen


script:
  id: wake_screen
  then:
  - light.turn_on:
      id: display_backlight
      brightness: 100%
  - delay: 30s
  - light.turn_on:
      id: display_backlight
      brightness: 50%
  - delay: 10s
  - light.turn_off: display_backlight


light:
  - platform: monochromatic
    name: "Backlight"
    output: backlight_output
    id: display_backlight
    default_transition_length: 0s
